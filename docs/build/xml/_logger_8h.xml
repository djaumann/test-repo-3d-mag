<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="_logger_8h" kind="file" language="C++">
    <compoundname>Logger.h</compoundname>
    <includes local="no">stdarg.h</includes>
    <includedby refid="_i_i_c_using_two_wire_8cpp" local="yes">src/IICUsingTwoWire.cpp</includedby>
    <includedby refid="_logger_8cpp" local="yes">src/Logger.cpp</includedby>
    <includedby refid="_t_lx493_d___a1_b6_8c" local="yes">src/TLx493D_A1B6.c</includedby>
    <includedby refid="_t_lx493_d___a2_b6_8c" local="yes">src/TLx493D_A2B6.c</includedby>
    <includedby refid="_t_lx493_d___p2_b6_8c" local="yes">src/TLx493D_P2B6.c</includedby>
    <includedby refid="_t_lx493_d___p3_b6_8c" local="yes">src/TLx493D_P3B6.c</includedby>
    <includedby refid="_t_lx493_d___p3_i8_8c" local="yes">src/TLx493D_P3I8.c</includedby>
    <includedby refid="_t_lx493_d___w2_b6_8c" local="yes">src/TLx493D_W2B6.c</includedby>
    <includedby refid="_t_lx493_d___w2_b_w_8c" local="yes">src/TLx493D_W2BW.c</includedby>
    <includedby refid="_t_lx493_d__inc_8hpp" local="yes">src/TLx493D_inc.hpp</includedby>
    <includedby refid="tlx493d__common_8c" local="yes">src/tlx493d_common.c</includedby>
    <includedby refid="tlx493d__gen__2__common_8c" local="yes">src/tlx493d_gen_2_common.c</includedby>
    <includedby refid="tlx493d__gen__3__common_8c" local="yes">src/tlx493d_gen_3_common.c</includedby>
    <incdepgraph>
      <node id="1">
        <label>src/Logger.h</label>
        <link refid="_logger_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>stdarg.h</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="1">
        <label>src/Logger.h</label>
        <link refid="_logger_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>src/TLx493D_inc.hpp</label>
        <link refid="_t_lx493_d__inc_8hpp_source"/>
      </node>
    </invincdepgraph>
    <sectiondef kind="typedef">
      <memberdef kind="typedef" id="_logger_8h_1a821e71d2d4983d53bb07f12234212246" prot="public" static="no">
        <type>struct <ref refid="struct_t_lx493_d__t" kindref="compound">TLx493D_t</ref></type>
        <definition>typedef struct TLx493D_t TLx493D_t</definition>
        <argsstring></argsstring>
        <name>TLx493D_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>std includes. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Logger.h" line="17" column="24" bodyfile="src/Logger.h" bodystart="17" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="func">
      <memberdef kind="function" id="_logger_8h_1a77aaa450af06f5e3f80d0be5dfc006d4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void logPrintRegisters</definition>
        <argsstring>(const TLx493D_t *sensor, const char *headLine)</argsstring>
        <name>logPrintRegisters</name>
        <param>
          <type>const <ref refid="struct_t_lx493_d__t" kindref="compound">TLx493D_t</ref> *</type>
          <declname>sensor</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>headLine</declname>
        </param>
        <briefdescription>
<para>The function <computeroutput>logPrintRegisters</computeroutput> prints out all the internal registers of the passed sensor object. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">sensor</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to a <ref refid="struct_t_lx493_d__t" kindref="compound">TLx493D_t</ref> structure, which represents the TLx493D sensor. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Logger.h" line="28" column="6" bodyfile="src/Logger.cpp" bodystart="41" bodyend="53" declfile="src/Logger.h" declline="28" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="_logger_8h_1aaf0593697bbc7252c62efc9a80f08dd2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void logPrintDouble</definition>
        <argsstring>(double d)</argsstring>
        <name>logPrintDouble</name>
        <param>
          <type>double</type>
          <declname>d</declname>
        </param>
        <briefdescription>
<para>The function <computeroutput>logPrintDouble</computeroutput> prints out a value in the double format. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">d</parametername>
</parameternamelist>
<parameterdescription>
<para>Value which will be printed to the serial monitor. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Logger.h" line="35" column="6" bodyfile="src/Logger.cpp" bodystart="56" bodyend="58" declfile="src/Logger.h" declline="35" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="_logger_8h_1af02e34205de41605ae0ecf7fbd98dd3b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void logPrint</definition>
        <argsstring>(const char *format,...)</argsstring>
        <name>logPrint</name>
        <param>
          <type>const char *</type>
          <declname>format</declname>
        </param>
        <param>
          <type>...</type>
        </param>
        <briefdescription>
<para>The function <computeroutput>logPrint</computeroutput> is used to print out a formatted string - without prefix - to the serial output. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">format</parametername>
</parameternamelist>
<parameterdescription>
<para>Actual string, which should be printed to the serial output. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Logger.h" line="42" column="6" bodyfile="src/Logger.cpp" bodystart="61" bodyend="66" declfile="src/Logger.h" declline="42" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="_logger_8h_1a61527a53d2e52b32c07555a41b8303f6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void logPrintln</definition>
        <argsstring>(const char *format,...)</argsstring>
        <name>logPrintln</name>
        <param>
          <type>const char *</type>
          <declname>format</declname>
        </param>
        <param>
          <type>...</type>
        </param>
        <briefdescription>
<para>The function <computeroutput>logPrintln</computeroutput> is used to print out a formatted string - without prefix - to the serial output plus a trailing linefeed. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">format</parametername>
</parameternamelist>
<parameterdescription>
<para>Actual string, which should be printed to the serial output. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Logger.h" line="49" column="6" bodyfile="src/Logger.cpp" bodystart="69" bodyend="76" declfile="src/Logger.h" declline="49" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="_logger_8h_1ab9b4ed01ba7a88bb5e22d1c84e0f0abf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void logInfo</definition>
        <argsstring>(const char *format,...)</argsstring>
        <name>logInfo</name>
        <param>
          <type>const char *</type>
          <declname>format</declname>
        </param>
        <param>
          <type>...</type>
        </param>
        <briefdescription>
<para>The function <computeroutput>logInfo</computeroutput> is used to print out an info message to the user. It uses the prefix &quot;INFO : &quot; to directly indicate the origin of the message. It also allows to pass a variable number of arguments to the function (...). </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">format</parametername>
</parameternamelist>
<parameterdescription>
<para>Actual string, which should be printed to the serial output. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Logger.h" line="58" column="6" bodyfile="src/Logger.cpp" bodystart="79" bodyend="86" declfile="src/Logger.h" declline="58" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="_logger_8h_1a34f49079ccda568e5054918ae4354431" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void logWarn</definition>
        <argsstring>(const char *format,...)</argsstring>
        <name>logWarn</name>
        <param>
          <type>const char *</type>
          <declname>format</declname>
        </param>
        <param>
          <type>...</type>
        </param>
        <briefdescription>
<para>The function <computeroutput>logWarn</computeroutput> is used to print out a warning message to the user. It uses the prefix &quot;WARNING : &quot; to directly indicate the origin of the message. It also allows to pass a variable number of arguments to the function (...). </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">format</parametername>
</parameternamelist>
<parameterdescription>
<para>Actual string, which should be printed to the serial output. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Logger.h" line="67" column="6" bodyfile="src/Logger.cpp" bodystart="89" bodyend="96" declfile="src/Logger.h" declline="67" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="_logger_8h_1a60baa11f08afed73f5a7bc5d31f698ce" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void logError</definition>
        <argsstring>(const char *format,...)</argsstring>
        <name>logError</name>
        <param>
          <type>const char *</type>
          <declname>format</declname>
        </param>
        <param>
          <type>...</type>
        </param>
        <briefdescription>
<para>The function <computeroutput>logError</computeroutput> is used to print out an error message to the user. It uses the prefix &quot;ERROR : &quot; to directly indicate the origin of the message. It also allows to pass a variable number of arguments to the function (...). </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">format</parametername>
</parameternamelist>
<parameterdescription>
<para>Actual string, which should be printed to the serial output. <linebreak/>
 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Logger.h" line="76" column="6" bodyfile="src/Logger.cpp" bodystart="99" bodyend="106" declfile="src/Logger.h" declline="76" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="_logger_8h_1abd7159b054634cbf0db5771d733defe6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void logFlush</definition>
        <argsstring>(void)</argsstring>
        <name>logFlush</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>The function <computeroutput>flush</computeroutput> is used to send a new line character to ther serial output. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Logger.h" line="82" column="6" bodyfile="src/Logger.cpp" bodystart="109" bodyend="113" declfile="src/Logger.h" declline="82" declcolumn="6"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#ifndef<sp/>TLX493D_LOGGER_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TLX493D_LOGGER_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cstdarg&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="struct_t_lx493_d__t" kindref="compound">TLx493D_t</ref><sp/>=<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_t_lx493_d__t" kindref="compound">TLx493D_t</ref>;</highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdarg.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_t_lx493_d__t" kindref="compound">TLx493D_t</ref><sp/><sp/><ref refid="struct_t_lx493_d__t" kindref="compound">TLx493D_t</ref>;</highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>logPrintRegisters(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_t_lx493_d__t" kindref="compound">TLx493D_t</ref><sp/>*sensor,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*headLine);</highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>logPrintDouble(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>d);</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>logPrint(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*format,<sp/>...);</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>logPrintln(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*format,<sp/>...);</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>logInfo(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*format,<sp/>...);</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>logWarn(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*format,<sp/>...);</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>logError(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*format,<sp/>...);</highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>logFlush(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal">}</highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>TLX493D_LOGGER_H</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="src/Logger.h"/>
  </compounddef>
</doxygen>
